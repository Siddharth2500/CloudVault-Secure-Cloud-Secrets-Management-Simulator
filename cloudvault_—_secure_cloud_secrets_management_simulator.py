# -*- coding: utf-8 -*-
"""CloudVault — Secure Cloud Secrets Management Simulator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1sEyvWd3UiDWmKNrdVAn4E3hqiXSSDK
"""

# ============================================================
# CloudVault — Secure Cloud Secrets Management Simulator
# ============================================================

import os
import json
import random
import base64
import hashlib
from datetime import datetime, timezone

# Configuration
SECRETS_FILE = "data/secrets_store.json"
AUDIT_REPORT = "data/secrets_audit_report.json"

NUM_SECRETS = 20
ROTATION_DAYS = 30  # days after which secret considered stale

# Ensure directories
os.makedirs(os.path.dirname(SECRETS_FILE), exist_ok=True)
os.makedirs(os.path.dirname(AUDIT_REPORT), exist_ok=True)

# Generate dummy secrets data if not exists
if not os.path.exists(SECRETS_FILE):
    secrets = []
    now = datetime.now(timezone.utc)
    for i in range(1, NUM_SECRETS + 1):
        # simulate creation date offset by random days up to 60
        days_old = random.randint(0, 60)
        created = (now.timestamp() - days_old * 24*3600)
        raw_secret = f"secret-value-{i}"
        hashed = hashlib.sha256(raw_secret.encode("utf-8")).hexdigest()
        secrets.append({
            "id": f"sec-{i:03}",
            "hash": hashed,
            "created_at": datetime.fromtimestamp(created, timezone.utc).isoformat(),
            "last_rotated_at": datetime.fromtimestamp(created, timezone.utc).isoformat(),
            "description": random.choice(["API key", "DB password", "Encryption key"]),
            "active": random.choice([True, False])
        })
    with open(SECRETS_FILE, "w", encoding="utf-8") as f:
        json.dump(secrets, f, indent=2)

def load_secrets(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def audit_secrets(secrets, rotation_days):
    now = datetime.now(timezone.utc)
    report = {
        "timestamp": now.isoformat(),
        "total_secrets": len(secrets),
        "active": 0,
        "stale": 0,
        "inactive": 0,
        "failures": []
    }
    for s in secrets:
        created = datetime.fromisoformat(s["created_at"])
        last_rotated = datetime.fromisoformat(s["last_rotated_at"])
        age_days = (now - last_rotated).days
        status = "active" if s.get("active", False) else "inactive"
        if status == "active":
            report["active"] += 1
        else:
            report["inactive"] += 1
        if status == "active" and age_days > rotation_days:
            report["stale"] += 1
            report["failures"].append({
                "secret_id": s["id"],
                "age_days": age_days,
                "issue": "rotation overdue"
            })
    return report

def run_audit(input_path, output_path, rotation_days):
    secrets = load_secrets(input_path)
    report = audit_secrets(secrets, rotation_days)
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2)
    return report

if __name__ == "__main__":
    result = run_audit(SECRETS_FILE, AUDIT_REPORT, ROTATION_DAYS)
    print("✅ Secrets audit complete:", result)